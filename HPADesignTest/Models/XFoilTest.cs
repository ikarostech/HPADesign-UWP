using HPADesign.Models;
using HPADesign.Models.Airfoils;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;

namespace HPADesignTest.Models
{
    [TestClass]
    public class XFoilTest
    {
        /// <summary>
        /// 許容誤差
        /// </summary>
        private double delta = 1e-7;
        private Airfoil Airfoil { get; set; }
        [TestInitialize]
        public void AirfoilInitialize()
        {
            //Clark_Yを読み込む
            Airfoil = new Airfoil();
            Airfoil.Coordinate.Points = new List<Pos>()
            {
                { new Pos(1.00000, 0.00060) },
                { new Pos(0.99344, 0.00216) },
                { new Pos(0.98165, 0.00494) },
                { new Pos(0.96782, 0.00820) },
                { new Pos(0.95254, 0.01174) },
                { new Pos(0.93656, 0.01540) },
                { new Pos(0.92034, 0.01904) },
                { new Pos(0.90394, 0.02264) },
                { new Pos(0.88745, 0.02620) },                { new Pos(0.87096, 0.02969) },                { new Pos(0.85444, 0.03311) },                { new Pos(0.83791, 0.03647) },                { new Pos(0.82138, 0.03975) },                { new Pos(0.80484, 0.04296) },                { new Pos(0.78829, 0.04609) },                { new Pos(0.77175, 0.04914) },                { new Pos(0.75520, 0.05211) },                { new Pos(0.73864, 0.05500) },                { new Pos(0.72207, 0.05782) },                { new Pos(0.70549, 0.06054) },                { new Pos(0.68890, 0.06319) },                { new Pos(0.67234, 0.06575) },                { new Pos(0.65579, 0.06822) },                { new Pos(0.63925, 0.07058) },                { new Pos(0.62277, 0.07284) },                { new Pos(0.60630, 0.07497) },                { new Pos(0.58980, 0.07700) },                { new Pos(0.57336, 0.07890) },                { new Pos(0.55689, 0.08068) },                { new Pos(0.54041, 0.08233) },                { new Pos(0.52391, 0.08386) },                { new Pos(0.50740, 0.08528) },                { new Pos(0.49093, 0.08658) },                { new Pos(0.47448, 0.08773) },                { new Pos(0.45804, 0.08876) },                { new Pos(0.44164, 0.08964) },                { new Pos(0.42531, 0.09037) },                { new Pos(0.40900, 0.09093) },                { new Pos(0.39270, 0.09133) },                { new Pos(0.37637, 0.09156) },                { new Pos(0.36001, 0.09163) },                { new Pos(0.34360, 0.09155) },                { new Pos(0.32714, 0.09133) },                { new Pos(0.31066, 0.09097) },                { new Pos(0.29417, 0.09050) },                { new Pos(0.27783, 0.08991) },                { new Pos(0.26173, 0.08917) },                { new Pos(0.24588, 0.08824) },                { new Pos(0.23032, 0.08707) },                { new Pos(0.21499, 0.08564) },                { new Pos(0.19990, 0.08391) },                { new Pos(0.18499, 0.08184) },                { new Pos(0.17016, 0.07943) },                { new Pos(0.15538, 0.07667) },                { new Pos(0.14076, 0.07361) },                { new Pos(0.12636, 0.07023) },                { new Pos(0.11227, 0.06655) },                { new Pos(0.09860, 0.06257) },                { new Pos(0.08537, 0.05829) },                { new Pos(0.07278, 0.05382) },                { new Pos(0.06126, 0.04929) },                { new Pos(0.05105, 0.04478) },                { new Pos(0.04218, 0.04032) },                { new Pos(0.03460, 0.03598) },                { new Pos(0.02824, 0.03180) },                { new Pos(0.02293, 0.02781) },                { new Pos(0.01848, 0.02403) },                { new Pos(0.01473, 0.02054) },                { new Pos(0.01155, 0.01741) },                { new Pos(0.00885, 0.01465) },                { new Pos(0.00660, 0.01217) },                { new Pos(0.00472, 0.00989) },                { new Pos(0.00318, 0.00774) },                { new Pos(0.00194, 0.00569) },                { new Pos(0.00100, 0.00372) },                { new Pos(0.00035, 0.00181) },                { new Pos(-0.00000, -0.00003) },                { new Pos(-0.00004, -0.00185) },                { new Pos(0.00022, -0.00368) },                { new Pos(0.00082, -0.00552) },                { new Pos(0.00173, -0.00735) },                { new Pos(0.00293, -0.00918) },                { new Pos(0.00443, -0.01100) },                { new Pos(0.00623, -0.01280) },                { new Pos(0.00837, -0.01457) },                { new Pos(0.01086, -0.01630) },                { new Pos(0.01379, -0.01790) },                { new Pos(0.01726, -0.01936) },                { new Pos(0.02137, -0.02066) },                { new Pos(0.02632, -0.02186) },                { new Pos(0.03239, -0.02309) },                { new Pos(0.03973, -0.02447) },                { new Pos(0.04842, -0.02584) },                { new Pos(0.05871, -0.02701) },                { new Pos(0.07083, -0.02794) },                { new Pos(0.08476, -0.02870) },                { new Pos(0.09979, -0.02937) },                { new Pos(0.11534, -0.02985) },                { new Pos(0.13129, -0.03015) },                { new Pos(0.14744, -0.03027) },                { new Pos(0.16378, -0.03023) },                { new Pos(0.18028, -0.03005) },                { new Pos(0.19687, -0.02974) },                { new Pos(0.21359, -0.02932) },                { new Pos(0.23047, -0.02883) },                { new Pos(0.24741, -0.02827) },                { new Pos(0.26443, -0.02766) },                { new Pos(0.28157, -0.02701) },                { new Pos(0.29876, -0.02636) },                { new Pos(0.31597, -0.02571) },                { new Pos(0.33319, -0.02507) },                { new Pos(0.35042, -0.02444) },                { new Pos(0.36766, -0.02381) },                { new Pos(0.38492, -0.02318) },                { new Pos(0.40218, -0.02255) },                { new Pos(0.41944, -0.02192) },                { new Pos(0.43669, -0.02129) },                { new Pos(0.45393, -0.02066) },                { new Pos(0.47116, -0.02003) },                { new Pos(0.48838, -0.01939) },                { new Pos(0.50557, -0.01876) },                { new Pos(0.52274, -0.01813) },                { new Pos(0.53990, -0.01749) },                { new Pos(0.55706, -0.01687) },                { new Pos(0.57423, -0.01623) },                { new Pos(0.59142, -0.01560) },                { new Pos(0.60864, -0.01498) },                { new Pos(0.62583, -0.01434) },                { new Pos(0.64299, -0.01371) },                { new Pos(0.66015, -0.01308) },                { new Pos(0.67729, -0.01245) },                { new Pos(0.69444, -0.01182) },                { new Pos(0.71158, -0.01119) },                { new Pos(0.72873, -0.01056) },                { new Pos(0.74587, -0.00993) },                { new Pos(0.76302, -0.00930) },                { new Pos(0.78018, -0.00867) },                { new Pos(0.79735, -0.00804) },                { new Pos(0.81454, -0.00741) },                { new Pos(0.83176, -0.00678) },                { new Pos(0.84894, -0.00615) },                { new Pos(0.86610, -0.00552) },                { new Pos(0.88324, -0.00489) },                { new Pos(0.90035, -0.00426) },                { new Pos(0.91741, -0.00364) },                { new Pos(0.93432, -0.00301) },                { new Pos(0.95093, -0.00240) },                { new Pos(0.96680, -0.00182) },                { new Pos(0.98113, -0.00129) },                { new Pos(0.99325, -0.00085) },                { new Pos(1.00000, -0.00060) }
            };
            Airfoil.Coordinate.N = 604;
        }
        [TestMethod]
        public void XFOILのnbとの照合()
        {
            int expect = 151;
            int actual = Airfoil.Coordinate.Points.Count;
            Assert.AreEqual(expect, actual);
        }
        [TestMethod]
        public void Preprocess内の翼型面積の算出()
        {
            double expect = 0.0809538; 
            double actual = Airfoil.Coordinate.Area;
            Assert.AreEqual(expect, actual, delta);
        }

        [TestMethod]
        public void scalcによる部分孤の長さの算出()
        {
            List<double> expect = new List<double>()
            {
                0,0.0067429370,0.0188562562,0.0330652850,0.0487499909,0.0651437702,0.0817671874,0.0985576609,0.1154275661,0.1322828383,0.1491531317,0.1660211636,0.1828734423,0.1997220536,0.2165654321,0.2333842935,0.2501986743,0.2670089598,0.2838172108,0.3006188416,0.3174191571,0.3341758632,0.3509091654,0.3676166846,0.3842509264,0.4008580875,0.4174824943,0.4340319233,0.4505978310,0.4671602252,0.4837310097,0.5003019632,0.5168231890,0.5333133375,0.5497855717,0.5662091645,0.5825554730,0.5988750839,0.6151799911,0.6315116108,0.6478717605,0.6642819555,0.6807434257,0.6972273572,0.7137240539,0.7300747022,0.7461916994,0.7620689599,0.7776728857,0.7930694373,0.8082582818,0.8233112882,0.8383358348,0.8533713261,0.8683081263,0.8830994886,0.8976621292,0.9118997308,0.9258048126,0.9391647902,0.9515434533,0.9627051825,0.9726333495,0.9813678787,0.9889785291,0.9956205319,1.0014592732,1.0065820263,1.0110440102,1.0149050463,1.0182536132,1.0212087443,1.0238533804,1.0262492310,1.0284320044,1.0304495772,1.0323225695,1.0341430090,1.0359913867,1.0379267419,1.0399705130,1.0421588685,1.0445173426,1.0470629270,1.0498400658,1.0528720619,1.0562104597,1.0599750978,1.0642857938,1.0693791718,1.0755725392,1.0830411402,1.0918384693,1.1021947718,1.1143504001,1.1283011169,1.1433460430,1.1589034496,1.1748562706,1.1910067164,1.2073467654,1.2238477472,1.2404406433,1.2571659175,1.2740530280,1.2910022817,1.3080332094,1.3251855300,1.3423878147,1.3596100852,1.3768419742,1.3940834881,1.4113349953,1.4286064891,1.4458779830,1.4631494768,1.4804109773,1.4976624845,1.5149039984,1.5321358874,1.5493374280,1.5665189821,1.5836909127,1.6008621095,1.6180440331,1.6352455738,1.6524767316,1.6696786414,1.6868502022,1.7040217630,1.7211733372,1.7383349048,1.7554864790,1.7726480466,1.7897996208,1.8069611884,1.8241327491,1.8413143032,1.8585158438,1.8757473644,1.8929389117,1.9101104725,1.9272620468,1.9443836413,1.9614549037,1.9783766353,1.9949978326,2.0108784277,2.0252182255,2.0373462096,2.0441008377,0.0067429370,0.0188562562,0.0330652850,0.0487499909,0.0651437702,0.0817671874,0.0985576609,0.1154275661,0.1322828383,0.1491531317,0.1660211636,0.1828734423,0.1997220536,0.2165654321,0.2333842935,0.2501986743,0.2670089598,0.2838172108,0.3006188416,0.3174191571,0.3341758632,0.3509091654,0.3676166846,0.3842509264,0.4008580875,0.4174824943,0.4340319233,0.4505978310,0.4671602252,0.4837310097,0.5003019632,0.5168231890,0.5333133375,0.5497855717,0.5662091645,0.5825554730,0.5988750839,0.6151799911,0.6315116108,0.6478717605,0.6642819555,0.6807434257,0.6972273572,0.7137240539,0.7300747022,0.7461916994,0.7620689599,0.7776728857,0.7930694373,0.8082582818,0.8233112882,0.8383358348,0.8533713261,0.8683081263,0.8830994886,0.8976621292,0.9118997308,0.9258048126,0.9391647902,0.9515434533,0.9627051825,0.9726333495,0.9813678787,0.9889785291,0.9956205319,1.0014592732,1.0065820263,1.0110440102,1.0149050463,1.0182536132,1.0212087443,1.0238533804,1.0262492310,1.0284320044,1.0304495772,1.0323225695,1.0341430090,1.0359913867,1.0379267419,1.0399705130,1.0421588685,1.0445173426,1.0470629270,1.0498400658,1.0528720619,1.0562104597,1.0599750978,1.0642857938,1.0693791718,1.0755725392,1.0830411402,1.0918384693,1.1021947718,1.1143504001,1.1283011169,1.1433460430,1.1589034496,1.1748562706,1.1910067164,1.2073467654,1.2238477472,1.2404406433,1.2571659175,1.2740530280,1.2910022817,1.3080332094,1.3251855300,1.3423878147,1.3596100852,1.3768419742,1.3940834881,1.4113349953,1.4286064891,1.4458779830,1.4631494768,1.4804109773,1.4976624845,1.5149039984,1.5321358874,1.5493374280,1.5665189821,1.5836909127,1.6008621095,1.6180440331,1.6352455738,1.6524767316,1.6696786414,1.6868502022,1.7040217630,1.7211733372,1.7383349048,1.7554864790,1.7726480466,1.7897996208,1.8069611884,1.8241327491,1.8413143032,1.8585158438,1.8757473644,1.8929389117,1.9101104725,1.9272620468,1.9443836413,1.9614549037,1.9783766353,1.9949978326,2.0108784277,2.0252182255,2.0373462096,2.0441008377
            };
            List<double> actual = new List<double>() { 0 };
            for(int i=0; i<Airfoil.Coordinate.Arc.Count-1; i++)
            {
                actual.Add(actual[i] + Airfoil.Coordinate.Arc[i]);
            }

            for(int i=0; i<Airfoil.Coordinate.Arc.Count; i++)
            {
                Assert.AreEqual(expect[i], actual[i], delta);
            }
        }
    }
}
